import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import { readBody, setCookie, getRequestURL, createError } from 'h3'

const SECRET = process.env.JWT_SECRET || 'supersecret'
const prisma = new PrismaClient()

// üîí Brute-force protection: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ IP
const loginAttempts = new Map<string, { count: number; lastAttempt: number }>()

export default defineEventHandler(async (event) => {
  // üîí Brute-force protection: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const ip =
    event.node.req.headers['x-forwarded-for']?.toString() ||
    event.node.req.socket.remoteAddress ||
    'unknown'

  const now = Date.now()
  const attempt = loginAttempts.get(ip) || { count: 0, lastAttempt: now }

  // üîí –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
  if (now - attempt.lastAttempt > 5 * 60 * 1000) {
    attempt.count = 0
  }

  attempt.count++
  attempt.lastAttempt = now
  loginAttempts.set(ip, attempt)

  // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –±–æ–ª–µ–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç
  if (attempt.count > 5) {
    throw createError({
      statusCode: 429,
      message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç.'
    })
  }

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await readBody(event)
    const { username, password } = body

    if (!username || !password) {
      throw createError({ statusCode: 400, message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å 
    const admin = await prisma.admin.findUnique({ where: { username } })

    if (!admin || !admin.hashed_password) {
      throw createError({ statusCode: 401, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
    }

    const isMatch = await bcrypt.compare(password, admin.hashed_password)
    if (!isMatch) {
      throw createError({ statusCode: 401, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
    }

    // üîí –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    loginAttempts.delete(ip)

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏—è
    const token = jwt.sign(
      { username: admin.username }, 
      SECRET,                       
      { expiresIn: '1h' }           
    )

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –∫—É–∫–∏
    setCookie(event, 'auth', token, {
      httpOnly: false, // –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      path: '/',
      maxAge: 60 * 60,
      secure: false, // –≤–∞–∂–Ω–æ –¥–ª—è localhost! True –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å
      sameSite: 'lax'
    })

    return { message: 'Logged in' }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', err)
    throw createError({ statusCode: 500, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
  }
})
